<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
       http://code.alibabatech.com/schema/dubbo
       http://code.alibabatech.com/schema/dubbo/dubbo.xsd">



    <!--放行不需要校验的页面-->
    <security:http pattern="/*.html" security="none"/>
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/js/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <security:http pattern="/seller/save" security="none"/>

    <!--配置那些请求url需要被拦截-->
    <security:http>
        <security:intercept-url pattern="/**" access="hasRole('SELLER')"/>
        <!--配置开启表单登陆-->
        <security:form-login
                login-page="/shoplogin.html"
                username-parameter="username"
                password-parameter="password"
                default-target-url="/admin/index.html"
                always-use-default-target="true"
                authentication-failure-url="/shoplogin.html"/>
        <!--配置跨站请求伪造不可用-->
        <security:csrf disabled="true"/>
        <!--配置头信息,指定框架页策略(iframe子窗口也可以访问)-->
        <security:headers>
            <security:frame-options policy="SAMEORIGIN"/>
        </security:headers>

        <!--配置用户退出-->
        <security:logout logout-url="/logout"
                         invalidate-session="true"
                         logout-success-url="/shoplogin.html"/>
    </security:http>

    <!--配置认证管理器-->
    <security:authentication-manager>
        <!--引用userService对象，IUserService一定要事件接口：UserDetailsService -->
        <security:authentication-provider
                user-service-ref="userDetailsService">
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--配置dubbo服务消费者-->
    <dubbo:application name="pinyougou-shop-web"/>
    <!--配置zookeeper作为注册中心,发现服务地址-->
    <dubbo:registry address="zookeeper://192.168.12.131:2181"/>
    <!--配置引用单个服务,产生服务接口代理对象-->
    <dubbo:reference id="sellerService"
                     interface="com.pinyougou.service.SellerService"/>
    <!--
    这里的property的name是什么鬼到时候得搞清楚!11.5解答:
    就是自定义的实体类在服务器启动时候,web.xml会优先
    加载springSecurity这个配置文件
    那么这里就需要发现服务引入服务对象,然后这个bean初始化
    通过set构造器创建对象,标签给他name属性就能注入sellerService这个对象了
    然后就能初始化.UserDetailsServiceImpl
    -->
    <bean id="userDetailsService"
          class="com.pinyougou.shop.service.UserDetailsServiceImpl">
        <property name="sellerService" ref="sellerService"/>
    </bean>

    <!--加密类-->
    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
</beans>